[1mdiff --git a/index.ts b/index.ts[m
[1mindex 734f6f7..3c7e962 100644[m
[1m--- a/index.ts[m
[1m+++ b/index.ts[m
[36m@@ -17,9 +17,20 @@[m [mconst server = http.createServer(app);[m
 [m
 console.log('🚀 Starting server initialization...');[m
 [m
[31m-// 모든 도메인 허용 - 강화된 CORS 설정[m
[32m+[m[32m// 환경에 따라 CORS 옵션 분기[m
[32m+[m[32mconst isProduction = process.env.NODE_ENV === 'production';[m
[32m+[m[32mconst allowedOrigins = isProduction[m
[32m+[m[32m  ? [[m
[32m+[m[32m      'http://143.248.184.29:5174',[m
[32m+[m[32m      'https://143.248.184.29:5174',[m
[32m+[m[32m      'http://localhost:5174',[m
[32m+[m[32m      'https://week3client-production.up.railway.app',[m
[32m+[m[32m      // 실제 프론트 배포 도메인 추가[m
[32m+[m[32m    ][m
[32m+[m[32m  : true;[m
[32m+[m
 const corsOptions = {[m
[31m-  origin: '*', // 나중에 도메인으로 변경[m
[32m+[m[32m  origin: '*',[m
   credentials: true,[m
   methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],[m
   allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept'],[m
[36m@@ -45,30 +56,30 @@[m [mconst startServer = async () => {[m
     [m
     console.log('🔧 Setting up middleware...');[m
     [m
[31m-    // CORS 미들웨어를 가장 먼저 설정[m
[31m-    app.use(cors(corsOptions));[m
[31m-    [m
[31m-    // 추가 CORS 헤더 설정 - 더 강력한 버전[m
[32m+[m[32m    // CORS 헤더를 모든 요청에 대해 가장 먼저 강제 적용 (특히 OPTIONS)[m
     app.use((req, res, next) => {[m
[31m-      // 모든 도메인 허용[m
[31m-      res.header('Access-Control-Allow-Origin', '*');[m
[31m-      res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, HEAD');[m
[31m-      res.header('Access-Control-Allow-Headers', '*');[m
[31m-      res.header('Access-Control-Expose-Headers', '*');[m
[31m-      res.header('Access-Control-Allow-Credentials', 'false');[m
[31m-      res.header('Access-Control-Max-Age', '86400');[m
[31m-      [m
[31m-      // OPTIONS 요청 처리[m
[32m+[m[32m      const origin = req.headers.origin;[m
[32m+[m[32m      if (origin) {[m
[32m+[m[32m        res.setHeader('Access-Control-Allow-Origin', origin);[m
[32m+[m[32m        res.setHeader('Vary', 'Origin');[m
[32m+[m[32m        res.setHeader('Access-Control-Allow-Credentials', 'true');[m
[32m+[m[32m        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');[m
[32m+[m[32m        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept');[m
[32m+[m[32m      }[m
       if (req.method === 'OPTIONS') {[m
[31m-        res.status(200).end();[m
[32m+[m[32m        res.writeHead(200, {[m
[32m+[m[32m          'Access-Control-Allow-Origin': origin || '*',[m
[32m+[m[32m          'Access-Control-Allow-Credentials': 'true',[m
[32m+[m[32m          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',[m
[32m+[m[32m          'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, Accept',[m
[32m+[m[32m          'Vary': 'Origin'[m
[32m+[m[32m        });[m
[32m+[m[32m        res.end();[m
         return;[m
       }[m
[31m-      [m
       next();[m
     });[m
     [m
[31m-    console.log('✅ CORS configured with origin: *');[m
[31m-    [m
     // HTTP 요청 로그 미들웨어[m
     app.use((req, res, next) => {[m
       console.log(`📡 HTTP ${req.method} ${req.url} - ${new Date().toISOString()}`);[m
[36m@@ -79,6 +90,37 @@[m [mconst startServer = async () => {[m
       next();[m
     });[m
     [m
[32m+[m[32m    // 상세 HTTP 요청/응답 로깅 미들웨어 (개발/디버깅용)[m
[32m+[m[32m    app.use(async (req, res, next) => {[m
[32m+[m[32m      console.log('======== HEADER ========');[m
[32m+[m[32m      console.log(req.method, req.url);[m
[32m+[m[32m      console.log(req.headers);[m
[32m+[m[32m      console.log('========= BODY =========');[m
[32m+[m[32m      if (req.body && Object.keys(req.body).length > 0) {[m
[32m+[m[32m        console.log(req.body);[m
[32m+[m[32m      } else {[m
[32m+[m[32m        console.log('(empty)');[m
[32m+[m[32m      }[m
[32m+[m[32m      // 응답 로깅을 위해 res.send를 감싼다[m
[32m+[m[32m      const oldSend = res.send;[m
[32m+[m[32m      res.send = function (body) {[m
[32m+[m[32m        console.log('======= RESPONSE =======');[m
[32m+[m[32m        // 응답 헤더[m
[32m+[m[32m        console.log(res.getHeaders());[m
[32m+[m[32m        // 응답 바디[m
[32m+[m[32m        try {[m
[32m+[m[32m          const parsed = typeof body === 'string' ? JSON.parse(body) : body;[m
[32m+[m[32m          console.log(parsed);[m
[32m+[m[32m        } catch {[m
[32m+[m[32m          console.log(body);[m
[32m+[m[32m        }[m
[32m+[m[32m        console.log('========================');[m
[32m+[m[32m        // 원래 send 호출[m
[32m+[m[32m        return oldSend.call(this, body);[m
[32m+[m[32m      };[m
[32m+[m[32m      next();[m
[32m+[m[32m    });[m
[32m+[m[41m    [m
     // JSON 파싱 미들웨어[m
     app.use(express.json());[m
     [m
[36m@@ -134,13 +176,6 @@[m [minitializeSocketHandlers(io);[m
       console.log(`🏥 Health check available at: http://localhost:${PORT}/health`);[m
       console.log(`📡 Server ready to accept connections!`);[m
     });[m
[31m-[m
[31m-    // 서버 에러 핸들링[m
[31m-    server.on('error', (error) => {[m
[31m-      console.error('❌ Server error:', error);[m
[31m-      process.exit(1);[m
[31m-    });[m
[31m-[m
   } catch (error) {[m
     console.error('❌ Failed to start server:', error);[m
     console.error('❌ Error details:', {[m
[36m@@ -164,3 +199,4 @@[m [mprocess.on('unhandledRejection', (reason, promise) => {[m
 [m
 console.log('🚀 Starting server...');[m
 startServer();[m
[41m+  [m
\ No newline at end of file[m
